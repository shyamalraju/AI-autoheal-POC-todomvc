{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "You are an expert test automation engineer specializing in fixing Cypress test failures. \nYour expertise includes:\n- Cypress selector strategies and best practices\n- DOM analysis and element identification\n- Test failure diagnosis and resolution\n- Web application testing patterns\n\nAnalyze test failures and provide specific selector/locator fixes."
    },
    {
      "role": "user",
      "content": "Analyze the following test failure and provide specific selector/locator fixes.\n\n**INSTRUCTIONS:**\n1. Compare the test expectations with the actual DOM content\n2. Identify why selectors are failing (element not found, text mismatch, etc.)\n3. Provide the exact code changes needed to fix the test\n4. Focus on selector/locator fixes only\n5. Respond in JSON format with structured fix data\n\n**TEST FILE PATH:** tests/e2e/new-todo.spec.js\n\n**TEST FILE CONTENT:**\n```javascript\ndescribe('New todo', () => {\n  afterEach(function () {\n    if (this.currentTest.state === 'failed') {\n      const testTitle = this.currentTest.title //.replace(/[<>:\"\\/\\\\|?*]+/g, '-'); // Sanitize filename\n      const errorMessage = this.currentTest.err?.stack || this.currentTest.err?.message || 'Unknown error';\n\n      cy.screenshot(`${testTitle} (failure)`);\n\n      cy.document().then((doc) => {\n        const html = doc.documentElement.outerHTML;\n\n        // Write DOM snapshot\n        cy.writeFile(`cypress/failures/${testTitle}.html`, html);\n\n        // Write error message\n        cy.writeFile(`cypress/failures/${testTitle}.log.txt`, errorMessage);\n\n        // Parse error stack to extract line information\n        const errorStack = this.currentTest.err?.stack || '';\n        let errorLine = null;\n        let errorColumn = null;\n\n        // Try to extract line/column from stack trace\n        const stackMatch = errorStack.match(/at.*\\(.*:(\\d+):(\\d+)\\)/);\n        if (stackMatch) {\n          errorLine = parseInt(stackMatch[1]);\n          errorColumn = parseInt(stackMatch[2]);\n        }\n\n        // Write test context\n        const testContext = {\n          testName: this.currentTest.title,\n          testFile: Cypress.spec.relative,\n          specFile: Cypress.spec.name,\n          timestamp: new Date().toISOString(),\n          error: {\n            message: this.currentTest.err?.message || 'Unknown error',\n            stack: this.currentTest.err?.stack || '',\n            line: errorLine,\n            column: errorColumn\n          }\n        };\n        cy.writeFile(`cypress/failures/${testTitle}.context.json`, JSON.stringify(testContext, null, 2));\n      });\n    }\n  });\n\n  it('should create new todo', () => {\n    cy.visit('/');\n    cy.contains('h1', 'todos');\n\n    cy.get('.new-todo')\n      .type('Demo')\n      .type('{enter}');\n\n    cy.get('.main .todo-list .view').contains('Demo');\n  });\n});\n\n```\n\n**ACTUAL DOM CONTENT:**\n```html\n<html><head><title>TodoMVC built with React and Redux</title></head><body>\n    <app-root><div id=\"app\"><section class=\"todoapp\"><header class=\"header\"><h1>todo's</h1><input class=\"new-todo\" placeholder=\"What needs to be done?\" data-testid=\"todo-create\" value=\"\"></header></section><footer class=\"info\"><p data-testid=\"instruction\">Double-click to edit a todo</p><p>Created by <a href=\"http://github.com/blacksonic/\">blacksonic</a></p><p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p></footer></div></app-root>\n  \n\n</body></html>\n```\n\n**ERROR LOCATION:**\n- Error Line: 50\n- Error Column: 7\n- Error Message: Timed out retrying after 4000ms: Expected to find content: 'todos' within the selector: 'h1' but never did.\n\n**WORKFLOW INFO:**\n- Repository: shyamalraju/AI-autoheal-POC-todomvc\n- Workflow: AI Auto-Healing Pipeline\n- Failure URL: https://github.com\n\n**RESPONSE FORMAT:**\nProvide your analysis and fix in this exact JSON format:\n{\n  \"analysis\": \"Brief analysis of the issue (e.g., 'Test expects 'todos' but finds 'todo's' in the DOM')\",\n  \"fix\": {\n    \"file\": \"{{TEST_FILE_PATH}}\",\n    \"line\": line number where the fix should be applied (use the exact line from ERROR_LOCATION),\n    \"column\": column number where the change starts (use the exact column from ERROR_LOCATION),\n    \"oldCode\": \"exact code to replace (e.g., \"cy.contains('h1', 'todos')\")\",\n    \"newCode\": \"exact replacement code (e.g., \"cy.contains('h1', \\\"todo's\\\")\")\",\n    \"reason\": \"why this fix is needed (e.g., 'Text content mismatch between expected and actual')\"\n  }\n}\n\n**IMPORTANT:** \n- Use the exact line and column numbers from ERROR_LOCATION\n- If ERROR_LOCATION shows \"unknown\", analyze the test file to find the correct line\n- Line and column must be numbers, not strings like \"unknown\"\n- Ensure the JSON is valid and all fields are provided"
    }
  ],
  "max_tokens": 1000,
  "temperature": 0.1
}