{
  "model": "claude-3-5-sonnet-20241022",
  "max_tokens": 1000,
  "messages": [
    {
      "role": "user",
      "content": "You are an expert test automation engineer specializing in fixing Cypress test failures. Analyze the following test failure and provide specific selector/locator fixes.\n\n**INSTRUCTIONS:**\n1. Compare the test expectations with the actual DOM content\n2. Identify why selectors are failing (element not found, text mismatch, etc.)\n3. Provide the exact code changes needed to fix the test\n4. Focus on selector/locator fixes only\n5. Respond in JSON format with 'analysis' and 'fix' fields\n\n**TEST FILE:**\n```javascript\ndescribe('New todo', () => {
  afterEach(function () {
    if (this.currentTest.state === 'failed') {
      const testTitle = this.currentTest.title.replace(/[<>:"\/\\|?*]+/g, '-'); // Sanitize filename
      const errorMessage = this.currentTest.err?.stack || this.currentTest.err?.message || 'Unknown error';

      cy.screenshot(`${testTitle} (failure)`);

      cy.document().then((doc) => {
        const html = doc.documentElement.outerHTML;

        // Write DOM snapshot
        cy.writeFile(`cypress/failures/${testTitle}.html`, html);

        // Write error message
        cy.writeFile(`cypress/failures/${testTitle}.log.txt`, errorMessage);
      });
    }
  });

  it('should create new todo', () => {
    cy.visit('/');
    cy.contains('h1', 'todos');

    cy.get('.new-todo')
      .type('Demo')
      .type('{enter}');

    cy.get('.main .todo-list .view').contains('Demo');
  });
});\n```\n\n**ACTUAL DOM CONTENT:**\n```html\n<html lang="en" style=""><head> <script type="text/javascript"> (()=>{"use strict";const e=window.Cypress=parent.Cypress;if(!e)throw new Error("Something went terribly wrong and we cannot proceed. We expected to find the global Cypress in the parent window but it is missing. This should never happen and likely is a bug. Please open an issue.");const t=(()=>{let e,t,n,r;const i=()=>{e=!1,t=!1,n=[],r={}},o=(e,t=[])=>"function"==typeof e?e.apply(window,t):window.eval(e);return i(),{wrap:()=>{const i={setTimeout:window.setTimeout,setInterval:window.setInterval,requestAnimationFrame:window.requestAnimationFrame,clearTimeout:window.clearTimeout,clearInterval:window.clearInterval},a=(e,t)=>i[e].apply(window,t),s=e=>n=>(t&&(r[n]=!0),a(e,[n])),w=t=>(...r)=>{let i,[s,w,...p]=r;return i=a(t,[(...r)=>{if(!e)return o(s,r);n.push({timerId:i,fnOrCode:s,params:r,type:t})},w,...p]),i};window.setTimeout=w("setTimeout"),window.setInterval=w("setInterval"),window.requestAnimationFrame=w("requestAnimationFrame"),window.clearTimeout=s("clearTimeout"),window.clearInterval=s("clearInterval")},reset:i,pause:a=>{e=Boolean(a),e||(t=!0,n.forEach((e=>{const{timerId:t,type:n,fnOrCode:i,params:a}=e;"setInterval"===n&&r[t]||o(i,a)})),i())}}})();e.removeAllListeners("app:timers:reset"),e.removeAllListeners("app:timers:pause"),e.on("app:timers:reset",t.reset),e.on("app:timers:pause",t.pause),t.wrap(),e.action("app:window:before:load",window)})(); </script>
    <meta charset="utf-8">
    <title>TodoMVC built with React and Redux</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="TodoMVC built with React and Redux">
  <script defer="" src="/static/js/bundle.js"></script><style>@charset "utf-8";

html,
body {
	margin: 0;
	padding: 0;
}

button {
	margin: 0;
	padding: 0;
	border: 0;
	background: none;
	font-size: 100%;
	vertical-align: baseline;
	font-family: inherit;
	font-weight: inherit;
	color: inherit;
	appearance: none;
	-webkit-f\n```\n\n**WORKFLOW INFO:**\n- Repository: shyamalraju/AI-autoheal-POC-todomvc\n- Workflow: Cypress E2E Tests with Auto-Healing\n- Failure URL: https://github.com/shyamalraju/AI-autoheal-POC-todomvc/actions/runs/16606546305\n\nProvide your analysis and fix in JSON format."
    }
  ]
}
